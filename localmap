<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Neighborhood Discovery — Taipei (Ningxia Rd)</title>

  <!-- Fonts & Handlebars -->
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Roboto&display=swap" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"/>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>

  <style>
    /* === Layout: dark sidebar + map === */
    html,body { height:100%; margin:0; font-family: "Montserrat", "Roboto", sans-serif; background:#000; color:#fff; }
    .neighborhood-discovery { height:100vh; width:100%; position:relative; box-sizing:border-box; }

    /* Sidebar (left) — dark theme modeled after your original style */
    .places-panel {
      position:absolute;
      left:0;
      top:0;
      bottom:0;
      width:360px;
      max-width:40%;
      background: rgba(0,0,0,0.8);
      border-right: 1px solid rgba(255,255,255,0.06);
      overflow-y:auto;
      z-index:2;
      padding:1rem;
    }
    .places-panel header { position:sticky; top:0; background:transparent; z-index:3; padding-bottom:0.5rem; }

    .places-panel h2 { font-size:1.25rem; margin:0 0 0.6rem 0; font-weight:700; color:#fff; }

    .search-input { position:relative; }
    .search-input input {
      width:100%; padding:0.6rem 2.5rem 0.6rem 0.9rem; border-radius:999px;
      background: rgba(255,255,255,0.06); color:#fff; border:1px solid rgba(255,255,255,0.06);
      outline:none; font-size:0.95rem;
    }
    .search-input button {
      position:absolute; right:8px; top:6px; background:none; border:none; color:#fff; cursor:pointer;
    }

    .filters { display:flex; gap:0.5rem; margin:0.8rem 0 1rem 0; flex-wrap:wrap; }
    .filters button {
      background:transparent; color:#fff; border:1px solid rgba(255,255,255,0.12);
      padding:0.35rem 0.75rem; border-radius:20px; cursor:pointer; font-size:0.9rem;
    }
    .filters button.active, .filters button:hover { background:#fff; color:#000; }

    .place-results-list { list-style:none; padding:0; margin:0; }
    .place-result {
      display:flex; gap:0.75rem; padding:0.75rem 0; border-bottom:1px solid rgba(255,255,255,0.04); align-items:center;
      cursor:pointer;
    }
    .place-result .name { font-weight:600; color:#fff; text-align:left; font-size:1rem; }
    .place-result .info { color:rgba(255,255,255,0.7); font-size:0.9rem; margin-top:0.2rem; }
    .place-result .photo {
      flex:0 0 84px; height:56px; background-size:cover; background-position:center; border-radius:6px;
      border:1px solid rgba(255,255,255,0.05);
    }

    .show-more-button {
      display:block; margin:1rem auto; padding:0.6rem 1rem; border-radius:999px;
      background:rgba(255,255,255,0.06); color:#fff; border:none; cursor:pointer;
    }

    /* Details panel — overlay right when a place is opened */
    .details-panel {
      position:absolute; right:-420px; top:0; bottom:0; width:420px; background:#111; color:#fff;
      padding:1rem; box-shadow:-6px 0 20px rgba(0,0,0,0.6); transition:right 0.32s ease; z-index:4; overflow:auto;
      border-left:1px solid rgba(255,255,255,0.05);
    }
    .details-panel.open { right:0; }
    .details-panel header { position:sticky; top:0; background:transparent; z-index:5; margin-bottom:0.5rem; }
    .details-panel h2 { margin:0 0 0.5rem 0; font-weight:700; color:#fff; }

    .detail-row { margin:0.6rem 0; color:rgba(255,255,255,0.9); }

    /* Map area (fills remaining space) */
    .map { position:absolute; left:360px; right:0; top:0; bottom:0; background:#111; }
    @media (max-width:900px) {
      .places-panel { width:320px; left:0; }
      .map { left:320px; }
    }
    @media (max-width:640px) {
      .places-panel { width:100%; height:50%; top:50%; left:0; right:0; }
      .map { top:0; bottom:50%; left:0; right:0; }
      .details-panel { width:100%; right:-100%; }
      .details-panel.open { right:0; top:0; bottom:0; left:0; position:fixed; }
    }

    /* small helpers */
    .muted { color: rgba(255,255,255,0.7); font-size:0.9rem; }
    .close-btn { background:none; border:none; color:#fff; font-size:1.25rem; cursor:pointer; float:right; }
  </style>
</head>

<body>
  <div class="neighborhood-discovery">
    <!-- Left: dark-styled places panel -->
    <aside class="places-panel panel no-scroll">
      <header class="navbar">
        <h2>Nearby — Ningxia / Taipei Main Stn</h2>

        <div class="search-input" style="margin-top:0.6rem;">
          <input class="place-search-input" placeholder="Search nearby places (e.g. cafe, bakery)" aria-label="Search nearby places">
          <button class="place-search-button" aria-label="Search">
            <span class="material-icons" style="font-size:20px;color:#fff;">search</span>
          </button>
        </div>

        <div class="filters" style="margin-top:0.8rem;">
          <button class="filter-btn active" data-type="all">All</button>
          <button class="filter-btn" data-type="restaurant">Food</button>
          <button class="filter-btn" data-type="cafe">Cafe</button>
          <button class="filter-btn" data-type="museum">See + Do</button>
        </div>
      </header>

      <div class="results">
        <ul class="place-results-list"></ul>
      </div>

      <button class="show-more-button sticky">Show More</button>
    </aside>

    <!-- Details panel (slide-in, dark) -->
    <section class="details-panel panel" id="detailsPanel"></section>

    <!-- Map (Google will render here) -->
    <div class="map" id="map"></div>

    <!-- Photo modal (kept simple) -->
    <div class="photo-modal" style="display:none;"></div>

    <!-- marker SVG used by the ND code -->
    <svg class="marker-pin" xmlns="http://www.w3.org/2000/svg" width="26" height="38" fill="none" style="display:none;">
      <path d="M13 0C5.817 0 0 5.93 0 13.267c0 7.862 5.59 10.81 9.555 17.624C12.09 35.248 11.342 38 13 38c1.723 0 .975-2.817 3.445-7.043C20.085 24.503 26 21.162 26 13.267 26 5.93 20.183 0 13 0Z"/>
    </svg>
  </div>

  <!-- Handlebars templates (kept from ND) -->
  <script id="nd-place-results-tmpl" type="text/x-handlebars-template">
    {{#each places}}
      <li class="place-result" data-placeid="{{placeId}}">
        <div class="text" style="flex:1;">
          <div class="name">{{name}}</div>
          <div class="info muted">{{type}}</div>
        </div>
        <button class="photo" style="background-image:url({{photos.0.urlSmall}})" aria-label="show photo"></button>
      </li>
    {{/each}}
  </script>

  <script id="nd-place-details-tmpl" type="text/x-handlebars-template">
    <header class="navbar">
      <button class="back-button" style="background:none;border:none;color:#fff;">← Back</button>
      <button class="close-details" style="background:none;border:none;color:#fff;float:right;">✕</button>
    </header>
    <div style="padding-top:0.5rem;">
      <h2 style="margin:0 0 .4rem 0;">{{name}}</h2>
      <div class="muted"><a href="{{url}}" target="_blank" style="color:#9ecbff;">See on Google Maps</a></div>
    </div>
    <div class="section" style="margin-top:0.8rem;">
      {{#if address}}
        <div class="detail-row"><strong>Address</strong><div class="muted">{{address}}</div></div>
      {{/if}}
      {{#if phoneNumber}}
        <div class="detail-row"><strong>Phone</strong><div class="muted">{{phoneNumber}}</div></div>
      {{/if}}
      {{#if openingHours}}
        <div class="detail-row"><strong>Hours</strong>
          {{#each openingHours}}
            <div class="muted">{{days}} — {{hours}}</div>
          {{/each}}
        </div>
      {{/if}}
      {{#if photos}}
        <div class="detail-row" style="margin-top:0.6rem;">
          {{#each photos}}
            <div style="background-image:url({{urlLarge}});background-size:cover;background-position:center;height:180px;margin-bottom:8px;border-radius:6px;"></div>
          {{/each}}
        </div>
      {{/if}}
    </div>
  </script>

  <!-- Neighborhood Discovery core script (adapted from the ND sample) -->
  <script>
    'use strict';

    /* Utilities (taken from the NeighborhoodDiscovery sample) */
    function hideElement(el, focusEl) { if (!el) return; el.style.display = 'none'; if (focusEl) focusEl.focus(); }
    function showElement(el, focusEl) { if (!el) return; el.style.display = 'block'; if (focusEl) focusEl.focus(); }
    function formatPlaceType(str) { if (!str) return ""; const capitalized = str.charAt(0).toUpperCase() + str.slice(1); return capitalized.replace(/_/g,' '); }
    function parseDaysHours(openingHours) {
      if (!openingHours || !openingHours.weekday_text) return [];
      const daysHours = openingHours.weekday_text.map((e)=> e.split(/\:\s+/)).map((e)=> ({days: e[0].substr(0,3), hours: e[1]}));
      for (let i=1;i<daysHours.length;i++){
        if (daysHours[i-1].hours === daysHours[i].hours) {
          if (daysHours[i-1].days.indexOf('-') !== -1) {
            daysHours[i-1].days = daysHours[i-1].days.replace(/\w+$/, daysHours[i].days);
          } else { daysHours[i-1].days += ' - ' + daysHours[i].days; }
          daysHours.splice(i--,1);
        }
      }
      return daysHours;
    }

    // small mapping icon set (kept from ND sample)
    const ND_MARKER_ICONS_BY_TYPE = { '_default':'circle', 'restaurant':'restaurant', 'cafe':'local_cafe', 'bar':'local_bar', 'park':'park', 'museum':'museum', 'supermarket':'local_grocery_store', 'shopping_mall':'local_mall' };

    /**
     * NeighborhoodDiscovery widget (adapted)
     * Expects configuration object with: mapOptions, mapRadius, pois (list of placeIds)
     */
    function NeighborhoodDiscovery(configuration) {
      const widget = this;
      const widgetEl = document.querySelector('.neighborhood-discovery');

      widget.center = configuration.mapOptions.center;
      widget.places = configuration.pois || [];
      widget.mapRadius = configuration.mapRadius || 1000;

      // Initialize
      initializeMap();
      initializePlaceDetails();
      initializeSidePanel();
      initializeSearchInput();

      function initializeMap() {
        const mapOptions = Object.assign({}, configuration.mapOptions);
        widget.mapBounds = new google.maps.Circle({center: widget.center, radius: widget.mapRadius}).getBounds();
        mapOptions.restriction = {latLngBounds: widget.mapBounds};
        mapOptions.mapTypeControlOptions = {position: google.maps.ControlPosition.TOP_RIGHT};
        widget.map = new google.maps.Map(widgetEl.querySelector('.map'), mapOptions);
        widget.map.fitBounds(widget.mapBounds);
        widget.map.addListener('click', (e) => {
          if (e.placeId) { e.stop(); widget.selectPlaceById(e.placeId); }
        });

        // prepare marker SVG path
        const markerPath = widgetEl.querySelector('.marker-pin path').getAttribute('d');
        const drawMarker = function(title, position, fillColor, strokeColor, labelText) {
          return new google.maps.Marker({
            title: title,
            position: position,
            map: widget.map,
            icon: {
              path: markerPath,
              fillColor: fillColor,
              fillOpacity: 1,
              strokeColor: strokeColor,
              anchor: new google.maps.Point(13, 35),
              labelOrigin: new google.maps.Point(13, 13),
            },
            label: {
              text: labelText || '',
              color: 'white',
              fontSize: '12px',
              fontFamily: 'Material Icons',
            },
          });
        };

        widget.addPlaceMarker = function(place) {
          place.marker = drawMarker(place.name, place.coords, '#EA4335', '#C5221F', place.icon);
          place.marker.addListener('click', () => void widget.selectPlaceById(place.placeId));
        };

        widget.updateBounds = function(places) {
          const bounds = new google.maps.LatLngBounds();
          bounds.extend(widget.center);
          for (let place of places) {
            if (place.marker) bounds.extend(place.marker.getPosition());
          }
          widget.map.fitBounds(bounds, 100);
        };

        widget.selectedPlaceMarker = new google.maps.Marker({title:'Point of Interest'});
      }

      function initializePlaceDetails() {
        const detailsService = new google.maps.places.PlacesService(widget.map);
        const placeIdsToDetails = new Map();
        for (let p of widget.places) { placeIdsToDetails.set(p.placeId, p); p.fetchedFields = new Set(['place_id']); }

        widget.fetchPlaceDetails = function(placeId, fields, callback) {
          if (!placeId || !fields) return;
          let place = placeIdsToDetails.get(placeId);
          if (!place) { place = {placeId:placeId, fetchedFields: new Set(['place_id'])}; placeIdsToDetails.set(placeId, place); }
          const missingFields = fields.filter((f)=>!place.fetchedFields.has(f));
          if (missingFields.length === 0) { callback(place); return; }

          const request = {placeId: placeId, fields: missingFields};
          let retryCount = 0;
          const processResult = function(result, status) {
            if (status !== google.maps.places.PlacesServiceStatus.OK) {
              if (status === google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT && retryCount < 5) {
                const delay = (Math.pow(2,retryCount)+Math.random())*500;
                setTimeout(()=> detailsService.getDetails(request, processResult), delay);
                retryCount++;
              }
              return;
            }
            if (result.name) place.name = result.name;
            if (result.geometry) place.coords = result.geometry.location;
            if (result.formatted_address) place.address = result.formatted_address;
            if (result.photos) {
              place.photos = result.photos.map((photo)=>({
                urlSmall: photo.getUrl({maxWidth:200,maxHeight:200}),
                urlLarge: photo.getUrl({maxWidth:1200,maxHeight:1200}),
                attrs: photo.html_attributions
              })).slice(0,6);
            }
            if (result.types) {
              place.type = formatPlaceType(result.types[0]);
              place.icon = ND_MARKER_ICONS_BY_TYPE['_default'];
              for (let t of result.types) if (t in ND_MARKER_ICONS_BY_TYPE) { place.type = formatPlaceType(t); place.icon = ND_MARKER_ICONS_BY_TYPE[t]; break; }
            }
            if (result.url) place.url = result.url;
            if (result.website) { place.website = result.website; try { place.websiteDomain = new URL(place.website).hostname; } catch(e){} }
            if (result.formatted_phone_number) place.phoneNumber = result.formatted_phone_number;
            if (result.opening_hours) place.openingHours = parseDaysHours(result.opening_hours);

            for (let f of missingFields) place.fetchedFields.add(f);
            callback(place);
          };

          // If we have autocomplete cache, use it
          if (widget.placeIdsToAutocompleteResults) {
            const auto = widget.placeIdsToAutocompleteResults.get(placeId);
            if (auto) { processResult(auto, google.maps.places.PlacesServiceStatus.OK); return; }
          }
          detailsService.getDetails(request, processResult);
        };
      }

      function initializeSidePanel() {
        const placesPanelEl = widgetEl.querySelector('.places-panel');
        const detailsPanelEl = document.querySelector('.details-panel');
        const placeResultsEl = widgetEl.querySelector('.place-results-list');
        const showMoreButtonEl = widgetEl.querySelector('.show-more-button');
        const resultsTemplate = Handlebars.compile(document.getElementById('nd-place-results-tmpl').innerHTML);
        const detailsTemplate = Handlebars.compile(document.getElementById('nd-place-details-tmpl').innerHTML);

        const showPhotoModal = function(photo, placeName) {
          // minimal modal: open a new tab for simplicity (or you can implement an overlay)
          window.open(photo.urlLarge, '_blank');
        };

        let selectedPlaceId;
        widget.selectPlaceById = function(placeId, panToMarker) {
          if (selectedPlaceId === placeId) return;
          selectedPlaceId = placeId;

          const showDetailsPanel = function(place) {
            detailsPanelEl.innerHTML = detailsTemplate(place);
            showElement(detailsPanelEl);
            detailsPanelEl.classList.add('open');

            // wire up close/back buttons:
            const backBtn = detailsPanelEl.querySelector('.back-button');
            const closeBtn = detailsPanelEl.querySelector('.close-details');
            if (backBtn) backBtn.addEventListener('click', ()=> { hideElement(detailsPanelEl); detailsPanelEl.classList.remove('open'); selectedPlaceId = undefined; widget.selectedPlaceMarker.setMap(null); });
            if (closeBtn) closeBtn.addEventListener('click', ()=> { hideElement(detailsPanelEl); detailsPanelEl.classList.remove('open'); selectedPlaceId = undefined; widget.selectedPlaceMarker.setMap(null); });
            detailsPanelEl.querySelectorAll('.photo').forEach((photoEl,i)=> photoEl.addEventListener('click', ()=> showPhotoModal(place.photos[i], place.name)));
          };

          const processResult = function(place) {
            if (place.marker) {
              widget.selectedPlaceMarker.setMap(null);
            } else {
              widget.selectedPlaceMarker.setPosition(place.coords);
              widget.selectedPlaceMarker.setMap(widget.map);
            }
            if (panToMarker) widget.map.panTo(place.coords);
            showDetailsPanel(place);
          };

          widget.fetchPlaceDetails(placeId, ['name','types','geometry.location','formatted_address','photo','url','website','formatted_phone_number','opening_hours'], processResult);
        };

        const renderPlaceResults = function(places, startIndex) {
          placeResultsEl.insertAdjacentHTML('beforeend', resultsTemplate({places: places}));
          const els = placeResultsEl.querySelectorAll('.place-result');
          els.forEach((resultEl) => {
            const placeId = resultEl.dataset.placeid;
            resultEl.addEventListener('click', ()=> widget.selectPlaceById(placeId, true));
            const photoEl = resultEl.querySelector('.photo');
            if (photoEl) photoEl.addEventListener('click', (e)=> { e.stopPropagation(); const idx = Array.from(placeResultsEl.children).indexOf(resultEl); const place = places[idx]; if (place && place.photos && place.photos[0]) showPhotoModal(place.photos[0], place.name); });
          });
        };

        let nextPlaceIndex = 0;
        const ND_NUM_PLACES_INITIAL = 5;
        const ND_NUM_PLACES_SHOW_MORE = 5;

        const showNextPlaces = function(n) {
          const nextPlaces = widget.places.slice(nextPlaceIndex, nextPlaceIndex + n);
          if (nextPlaces.length < 1) { hideElement(showMoreButtonEl); return; }
          showMoreButtonEl.disabled = true;
          let count = nextPlaces.length;
          for (let place of nextPlaces) {
            const processResult = function(place) {
              count--;
              if (count > 0) return;
              renderPlaceResults(nextPlaces, nextPlaceIndex);
              nextPlaceIndex += n;
              widget.updateBounds(widget.places.slice(0, nextPlaceIndex));
              if (nextPlaceIndex < widget.places.length) { showElement(showMoreButtonEl); showMoreButtonEl.disabled = false; }
              else hideElement(showMoreButtonEl);
            };
            widget.fetchPlaceDetails(place.placeId, ['name','types','geometry.location','photo'], processResult);
          }
        };

        // initial load
        showNextPlaces(ND_NUM_PLACES_INITIAL);

        showMoreButtonEl.addEventListener('click', ()=> showNextPlaces(ND_NUM_PLACES_SHOW_MORE));

        // filter buttons (basic client-side filter by type)
        widgetEl.querySelectorAll('.filter-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            widgetEl.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            const type = btn.dataset.type;
            if (type === 'all') {
              placeResultsEl.querySelectorAll('.place-result').forEach(el => el.style.display = 'flex');
            } else {
              placeResultsEl.querySelectorAll('.place-result').forEach(el => {
                const idx = Array.from(placeResultsEl.children).indexOf(el);
                const place = widget.places[idx];
                if (!place || !place.type) { el.style.display = 'none'; return; }
                el.style.display = (place.type.toLowerCase().includes(type.toLowerCase()) ? 'flex' : 'none');
              });
            }
          });
        });

        // clicking a produced place name will open the details (see renderPlaceResults wiring)
      }

      function initializeSearchInput() {
        const searchInputEl = document.querySelector('.place-search-input');
        widget.placeIdsToAutocompleteResults = new Map();
        const autocomplete = new google.maps.places.Autocomplete(searchInputEl, {
          types: ['establishment'],
          fields: ['place_id','name','types','geometry.location','formatted_address','photo','url','website','formatted_phone_number','opening_hours'],
          bounds: widget.mapBounds,
          strictBounds: true
        });
        autocomplete.addListener('place_changed', ()=> {
          const place = autocomplete.getPlace();
          if (!place.place_id) return;
          widget.placeIdsToAutocompleteResults.set(place.place_id, place);
          widget.selectPlaceById(place.place_id, true);
          searchInputEl.value = '';
        });
      }
    } // end NeighborhoodDiscovery
  </script>

  <!-- Configuration: centered on Taipei (Ningxia Rd / Datong), with many POIs (placeIds) -->
  <script>
    const CONFIGURATION = {
      "capabilities": {"search":true,"distances":false,"directions":false,"contacts":true,"atmospheres":false,"thumbnails":true},
      "pois": [
        {"placeId":"ChIJ6cxPB22pQjQRLik_97hS8Ow"},
        {"placeId":"ChIJS7qHS2mpQjQRjcsDvPunUgo"},
        {"placeId":"ChIJeXELiROpQjQR1REJMdOO8Xo"},
        {"placeId":"ChIJ1S3n_T-pQjQRTvubHQHpOa8"},
        {"placeId":"ChIJf3pxrGmpQjQRX2eGPcFCreg"},
        {"placeId":"ChIJc-TxSWypQjQR-8Eh7elK97Q"},
        {"placeId":"ChIJ57Tqe2mpQjQRYJHQgz16IVw"},
        {"placeId":"ChIJJ1gc6mupQjQRRxscrFaqhOo"},
        {"placeId":"ChIJnVQpHWypQjQRn0j-pRlAbqw"},
        {"placeId":"ChIJPZ12X0KpQjQRFQwmqOSdlRY"},
        {"placeId":"ChIJvwYCdhWpQjQRrhOaTfhMXmY"},
        {"placeId":"ChIJDbLTX3SpQjQRjMKXz_oqJzo"},
        {"placeId":"ChIJQbVZ4kGpQjQR1Pi2_7G7urM"},
        {"placeId":"ChIJ9cSgcWupQjQRMJ4hsH4Mfmg"},
        {"placeId":"ChIJ7wmFc0GpQjQRAANeSDTlQaQ"}
      ],
      "mapRadius": 1000,
      "mapOptions": {
        "center": {"lat":25.0584043,"lng":121.5151421},
        "fullscreenControl":true,"mapTypeControl":true,"streetViewControl":false,
        "zoom":16,"zoomControl":true,"maxZoom":20,"mapId":""
      },
      /* Your API key (you provided it earlier). Keep restricted in Cloud Console. */
      "mapsApiKey": "AIzaSyBudtJlIGrxiFWHkq0NnATxkdSLriBOTlo"
    };

    function initMap() {
      // instantiate ND widget
      new NeighborhoodDiscovery(CONFIGURATION);
    }
  </script>

  <!-- Templates will be used by the ND code already inserted above -->
  <!-- Load Google Maps JS (Places, geometry) with callback -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBudtJlIGrxiFWHkq0NnATxkdSLriBOTlo&callback=initMap&libraries=places,geometry" async defer></script>
</body>
</html>
